package com.wanda.ccs.model;

// Generated 2011-10-26 10:19:09 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import com.xcesys.extras.core.util.DateUtil;

/**
 * TSchedulePlanH generated by hbm2java
 */
@Entity
@Table(name = "T_SCHEDULE_PLAN_H", uniqueConstraints = @UniqueConstraint(columnNames = {
		"CINEMA_ID", "YMD" }))
@org.hibernate.annotations.Entity(dynamicUpdate = true, dynamicInsert = true)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class TSchedulePlanH extends AbstractStateUVEntity implements
		java.io.Serializable {

	private static final long serialVersionUID = -5861456527756530693L;
	private Long id;
	private TCinema tCinema;
	private Long cinemaId;
	private Date ymd;
	private String area;
	private Integer total;
	private Integer batchSall;
	private Boolean published;
	private String deliverance;// 审核意见
	/**
	 * 各影院的场次数。
	 */
	private Map<Long, Integer> hallTotal = new HashMap<Long, Integer>();
	private Map<Long, Integer> filmTotal = new HashMap<Long, Integer>();
	/**
	 * 各影片所排影厅数Map<filmId,hallId Set)
	 */
	private Map<Long, Set<Long>> filmHalls = new HashMap<Long, Set<Long>>();

	/**
	 * 排片明细列表。
	 */
	private List<TSchedulePlanB> planList = new ArrayList<TSchedulePlanB>(0);
	/**
	 * 已被删除排片明细列表。
	 */
	private Set<TSchedulePlanD> delList = new HashSet<TSchedulePlanD>(0);
	/**
	 * 执行过滤后的列表。
	 */
	private List<TSchedulePlanB> filteredList = new ArrayList<TSchedulePlanB>(0);

	public TSchedulePlanH() {
	}

	@Column(name = "AREA", length = 2)
	public String getArea() {
		return this.area;
	}

	@Column(name = "BATCH_SALL", nullable = false, precision = 38, scale = 0)
	public Integer getBatchSall() {
		return batchSall;
	}

	@Column(name = "CINEMA_ID", nullable = false)
	public Long getCinemaId() {
		return cinemaId;
	}

	@Column(name = "DELIVERANCE", length = 200)
	public String getDeliverance() {
		return deliverance;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "header", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<TSchedulePlanD> getDelList() {
		return delList;
	}

	@Transient
	public Map<Long, Integer> getFilmTotal() {
		return filmTotal;
	}
	@Transient
	public Map<Long, Set<Long>> getFilmHalls() {
		return filmHalls;
	}

	@Transient
	public List<TSchedulePlanB> getFilteredList() {
		return filteredList;
	}

	@Transient
	public Map<Long, Integer> getHallTotal() {
		return hallTotal;
	}

	@SequenceGenerator(name = "generator", sequenceName = "S_T_SCHEDULE_PLAN_H")
	@Id
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
	@Column(name = "SEQID", unique = true, nullable = false, precision = 38, scale = 0)
	public Long getId() {
		return this.id;
	}

	/**
	 * 获取子对象中的最大排序号。
	 * 
	 * @return
	 */
	@Transient
	public int getMaxSortSeq() {
		int maxSeq = 0;
		for (TSchedulePlanB b : this.getPlanList()) {
			Integer sortSeq = b.getSortSeq();
			if (sortSeq == null) {
				sortSeq = maxSeq + 1;
				b.setSortSeq(sortSeq);
			}
			maxSeq = Math.max(maxSeq, sortSeq);
		}

		return maxSeq;

	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "header", cascade = CascadeType.ALL, orphanRemoval = true)
	@OrderBy("hallName, startTime")
	public List<TSchedulePlanB> getPlanList() {
		return this.planList;
	}

	@Column(name = "PUBLISHED", length = 1)
	public Boolean getPublished() {
		return published;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CINEMA_ID", insertable = false, updatable = false)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public TCinema gettCinema() {
		return this.tCinema;
	}

	@Column(name = "TOTAL", nullable = false, precision = 38, scale = 0)
	public Integer getTotal() {
		return this.total;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "YMD", length = 7)
	public Date getYmd() {
		return this.ymd;
	}

	/**
	 * 判断当日排片是否可继续编辑
	 * 
	 * @return
	 */
	@Transient
	public boolean isEditable() {
		Date currentDate = DateUtil.getCurrentDate();
		Date date = DateUtil.getDayBegin(currentDate);
		boolean editable = true;
		if (date.after(this.ymd)) {
			editable = false;
		}
		// boolean met = false;
		// for (TSchedulePlanB b : getPlanList()) {
		// if (b.getPublished() != null && b.getPublished().booleanValue()) {
		// met = true;
		// break;
		// }
		// }
		// 审核通过后才能微调
		if (!(getPublished() == null ? false : getPublished().booleanValue())) {
			editable = editable
					&& !((getSubmit() == null ? false : getSubmit()
							.booleanValue()));
		}
		return editable;
	}

	/**
	 * 判断排片日期是否为未来日期。
	 * 
	 * @return
	 */
	@Transient
	public boolean isFuture() {
		Date currentDate = DateUtil.getCurrentDate();
		Date baseDate = DateUtil.set(this.ymd, 6, 0, 0, 0);
		baseDate = DateUtil.addDays(baseDate, 1);
		return currentDate.before(baseDate);
	}

	public void setArea(String area) {
		this.area = area;
	}

	public void setBatchSall(Integer batchSall) {
		this.batchSall = batchSall;
	}

	public void setCinemaId(Long cinemaId) {
		this.cinemaId = cinemaId;
	}

	public void setDeliverance(String deliverance) {
		this.deliverance = deliverance;
	}

	public void setDelList(Set<TSchedulePlanD> delList) {
		this.delList = delList;
	}

	public void setFilteredList(List<TSchedulePlanB> filteredList) {
		this.filteredList = filteredList;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public void setPlanList(List<TSchedulePlanB> tSchedulePlanBs) {
		this.planList = tSchedulePlanBs;
	}

	public void setPublished(Boolean published) {
		this.published = published;
		if (this.published == null) {
			this.published = false;
		}
	}

	public void settCinema(TCinema tCinema) {
		this.tCinema = tCinema;
	}

	public void setTotal(Integer total) {
		this.total = total;
	}

	public void setYmd(Date ymd) {
		this.ymd = ymd;
	}
}
