package com.wanda.ccs.model;

// Generated 2011-10-17 18:01:57 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.StringUtils;

import com.xcesys.extras.core.util.DateUtil;

/**
 * TScheduleInfoH generated by hbm2java
 */
@Entity
@Table(name = "T_SCHEDULE_INFO_H")
@org.hibernate.annotations.Entity(dynamicUpdate = true, dynamicInsert = true)
public class TScheduleInfoH extends AbstractStateUVEntity implements
		java.io.Serializable {

	private static final long serialVersionUID = -9093140495526653143L;
	private Long id;
	private String month;// 年月
	private String ver;// 版本
	private String deliverance;// 审核意见
	private Boolean editable;//是否可编辑

	private List<TScheduleInfoB> tScheduleInfoBs = new ArrayList<TScheduleInfoB>(
			0);

	public TScheduleInfoH() {
		this.editable = true;
	}

	@SequenceGenerator(name = "generator", sequenceName = "S_T_SCHEDULE_INFO_H")
	@Id
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
	@Column(name = "SEQID", unique = true, nullable = false, precision = 38, scale = 0)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	// @Pattern(regexp="\\d{6}",message="格式不符(正确格式为:YYYYMM)")
	@Column(name = "MONTH", length = 6)
	public String getMonth() {
		return this.month;
	}

	public void setMonth(String month) {
		this.month = month;
	}

	@Column(name = "DELIVERANCE", length = 200)
	public String getDeliverance() {
		return deliverance;
	}

	public void setDeliverance(String deliverance) {
		this.deliverance = deliverance;
	}

	@Column(name = "VER")
	public String getVer() {
		return this.ver;
	}

	public void setVer(String ver) {
		this.ver = ver;
	}

//	@OrderBy("onlineDate")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tScheduleInfoH", cascade = CascadeType.ALL, orphanRemoval = true)
	public List<TScheduleInfoB> gettScheduleInfoBs() {
		return this.tScheduleInfoBs;
	}

	public void settScheduleInfoBs(List<TScheduleInfoB> tScheduleInfoBs) {
		this.tScheduleInfoBs = tScheduleInfoBs;
	}

	@Transient
	public Map<String, List<TScheduleInfoB>> getNoRepeatFilmBodys() {
		Map<Long, TScheduleInfoB> map = new LinkedHashMap<Long, TScheduleInfoB>();
		for (TScheduleInfoB infoB : gettScheduleInfoBs()) {
			if (map.get(infoB.getFilmId()) == null) {
				map.put(infoB.getFilmId(), infoB);
			}
		}
		// 当月第一天
		Date firstDayOfCurMonth = null;
		// 当月最后一天
		Date finalDayOfCurMonth = null;
		if (StringUtils.isNotBlank(getMonth())) {
			Date monthDate = DateUtil.parse(getMonth(), "yyyyMM");
			firstDayOfCurMonth = DateUtil.getMonthBegin(monthDate);
			finalDayOfCurMonth = DateUtil.getMonthEnd(monthDate);
		}

		List<TScheduleInfoB> others = new ArrayList<TScheduleInfoB>();
		List<TScheduleInfoB> curMons = new ArrayList<TScheduleInfoB>();
		

		List<TScheduleInfoB> buyOuts = new ArrayList<TScheduleInfoB>();
		for (Long filmId : map.keySet()) {
			TScheduleInfoB b = map.get(filmId);
			
			// 当月买断片
			if (IDimType.DIMTYPE_ACCOUNT_TYPE_BUYOUT.equals(b.gettFilm().getAccountType())) {
				buyOuts.add(b);
				continue;
			}
			// 本排片月上映
			Date onlineDate = b.gettFilm().getPremiereDate();
			if (onlineDate != null && onlineDate.compareTo(firstDayOfCurMonth)>=0
					&& onlineDate.compareTo(finalDayOfCurMonth)<=0) {
				curMons.add(b);
				continue;
			}
			// 其他
			others.add(b);
		}
		Map<String,List<TScheduleInfoB>> m = new LinkedHashMap<String,List<TScheduleInfoB>>();
		
		Comparator<TScheduleInfoB> c = new Comparator<TScheduleInfoB>(){
			@Override
			public int compare(TScheduleInfoB o1, TScheduleInfoB o2) {
				Date d1 = o1.gettFilm().getPremiereDate();
				Date d2 = o2.gettFilm().getPremiereDate();
				return d1==null ? 1 : (d2==null ? -1 : d1.compareTo(d2));
			}};
		
		if(!buyOuts.isEmpty()){
			Collections.sort(buyOuts,c);
			m.put("buyOut", buyOuts);
		}
		if(!curMons.isEmpty()){
			m.put("curMonth", curMons);
			Collections.sort(curMons,c);
		}
		if(!others.isEmpty()){
			Collections.sort(others,c);
			m.put("other", others);
		}
		return m;
	}

	@Column(name = "EDITABLE")
	public Boolean getEditable() {
		return editable;
	}

	public void setEditable(Boolean editable) {
		this.editable = editable;
	}

	@Override
	public String toString() {
		return this.getMonth()
				+ ScheduleInfoVer.fromOrdinal(this.getVer()).getReadName();
	}
}
