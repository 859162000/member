package com.wanda.ccs.model;

// Generated 2011-10-17 18:01:57 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.IndexColumn;

import com.xcesys.extras.core.dao.model.BlameableEntity;
import com.xcesys.extras.core.util.StringUtil;

/**
 * TFilm generated by hbm2java
 */
@Entity
@Table(name = "T_FILM")
@org.hibernate.annotations.Entity(dynamicUpdate = true, dynamicInsert = true)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class TFilm extends BlameableEntity implements java.io.Serializable {

	private static final long serialVersionUID = -3787636976763037334L;
	private Long id; // 主键ID
	private TPublisher tPublisher;//发行商1
	private Long publisherId; // 发行商ID
	private TPublisher tPublisher3;//发行商2
	private Long publisherId3; // 发行商ID
	private TPublisher tPublisher4;//发行商3
	private Long publisherId4; // 发行商ID
	private TPublisher tPublisher5;//发行商4
	private Long publisherId5; // 发行商ID
	private String filmCode; // 影片编码
	private String filmName; // 影片名称
	private Long runningTime; // 片长
	private String englishName; // 英文名称
	private String paiCiHao; // 排次号
	private String filmLevel; // 影片级别
	private String country; // 国家
	private String subtitle1; // 字幕1
	private String subtitle2; // 字幕2
	private String filmSet; // 影片制式
	private String yearMonth; // 发行年月
	private Date premiereDate; // 首映日期
	private Date endDate; // 落幕日期
	private Integer accountRatio; // 分账比例
	private String accountRatioDesc;//分账比例描述
	private Integer groupAccountRatio;//院线分账
	private Integer taxRatio; // 税金比例
	private TPublisher tPublisher2;//协助发行商
	private Long publisherId2; // 相关发行商ID
	private String displayName; // 显示片名
	private String pinCode; // 拼码
	private String seriesName; // 系列片名
	private String accountType; // 分账方式
	private String filmAccountType; // 影院分账
	private Long lowestPriceId; // 最低票价
	private Long uniqueFilmId; // 最低票价
	private TPriceBase lowestPrice; // 最低票价
	private String filmCate; // 影片类别
	private Long copyCount; // 拷贝数(胶片)
	private String filmCompany; // 出品公司
	private String producer; // 出品人
	private String director; // 导演
	private String mainActors; // 主要演员
	private String storyBrief; // 剧情简介
	private String releaseType;// 发行方式
	private List<TFilmSlot> tFilmSlots = new ArrayList<TFilmSlot>(0);
	private Set<TFilmContract> tFilmContracts = new HashSet<TFilmContract>(0);
	private List<TFilmCopy> tFilmCopies = new ArrayList<TFilmCopy>(0);
	private String[] filmTypes;
	private String[] languages;
	// private String[] showSets;
	private String showSet;
	private String[] audioTypes;
	private Boolean isDigital;// 是否数字
	private Boolean is3d;// 是否3D
	private Boolean isFilm;// 是否胶片
	private Boolean isIMax;// 是否IMAX
	private Boolean isReald; // 是否Reald
	private Boolean modified = false; // 是否Reald
	private TFilm uniqueFilm;
	
	private Boolean matched = false; // 是否匹配成功
	private Boolean deleted = false;
    private Date deletedDate;
    private String deletedBy;

	/**
	 * 语言MAP，方便界面操作。
	 */
	private Map<String, String> languagesMap;

	public TFilm() {
	}

	@Column(name = "ACCOUNT_RATIO", precision = 22, scale = 0)
	public Integer getAccountRatio() {
		return this.accountRatio;
	}

	@Column(name = "ACCOUNT_TYPE", length = 20)
	public String getAccountType() {
		return this.accountType;
	}

	@ElementCollection(fetch = FetchType.EAGER)
	@CollectionTable(name = "T_FT_AUDIOTYPE", joinColumns = { @JoinColumn(name = "FILM_ID") })
	@IndexColumn(name = "IDX")
	@Column(name = "AUDIO_TYPE")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public String[] getAudioTypes() {
		return audioTypes;
	}

	@Column(name = "COPY_COUNT", precision = 38, scale = 0)
	public Long getCopyCount() {
		return this.copyCount;
	}

	@Column(name = "COUNTRY", length = 20)
	public String getCountry() {
		return this.country;
	}

	@Column(name = "DIRECTOR")
	public String getDirector() {
		return this.director;
	}

	@Column(name = "DISPLAY_NAME", length = 90)
	public String getDisplayName() {
		if (StringUtil.isNullOrBlank(this.displayName)
				&& !StringUtil.isNullOrBlank(this.filmName)) {
			String[] split = this.filmName.split("(\\(|（)");
			if (split != null && split.length > 0) {
				displayName = split[0];
			}
		}
		return this.displayName;
	}

	@Transient
	public String getName4Schedule() {
		String ret = this.displayName + "(";
		if (this.getIsDigital() != null && this.getIsDigital().booleanValue()) {
			ret += "数";
		} else if (this.getIsFilm() != null && this.getIsFilm().booleanValue()) {
			ret += "胶";
		} else if (this.getIsIMax() != null && this.getIsIMax().booleanValue()) {
			ret += "IMAX";
		}
		if (this.getIs3d() != null && this.getIs3d().booleanValue()) {
			ret += "/3D";
		}
		return ret + ")";
	}

	@Column(name = "END_DATE", length = 7)
	public Date getEndDate() {
		return this.endDate;
	}

	@Column(name = "ENGLISH_NAME", length = 50)
	public String getEnglishName() {
		return this.englishName;
	}

	@Column(name = "FILM_ACCOUNT_TYPE", length = 20)
	public String getFilmAccountType() {
		return this.filmAccountType;
	}

	@Column(name = "FILM_CATE", length = 20)
	public String getFilmCate() {
		return this.filmCate;
	}

	@Column(name = "FILM_CODE", length = 20)
	public String getFilmCode() {
		return this.filmCode;
	}

	@Column(name = "FILM_COMPANY", length = 150)
	public String getFilmCompany() {
		return this.filmCompany;
	}

	@Column(name = "FILM_LEVEL", length = 20)
	public String getFilmLevel() {
		return this.filmLevel;
	}

	@Column(name = "FILM_NAME", length = 90)
	public String getFilmName() {
		return this.filmName;
	}

	@Column(name = "FILM_SET", length = 20)
	public String getFilmSet() {
		return this.filmSet;
	}

	@ElementCollection(fetch = FetchType.EAGER)
	@CollectionTable(name = "T_FT_TYPE", joinColumns = { @JoinColumn(name = "FILM_ID") })
	@IndexColumn(name = "IDX")
	@Column(name = "TYPE")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public String[] getFilmTypes() {
		return filmTypes;
	}

	@SequenceGenerator(name = "generator", sequenceName = "S_T_FILM")
	@Id
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
	@Column(name = "SEQID", unique = true, nullable = false, precision = 38, scale = 0)
	public Long getId() {
		return this.id;
	}

	@Column(name = "IS_3D")
	public Boolean getIs3d() {
		return is3d;
	}

	@Column(name = "IS_DIGITAL")
	public Boolean getIsDigital() {
		return isDigital;
	}

	@Column(name = "IS_FILM")
	public Boolean getIsFilm() {
		return isFilm;
	}


	@Column(name = "IS_REALD")
	public Boolean getIsReald() {
		return isReald;
	}
	@Column(name = "MATCHED")
	public Boolean getMatched() {
		return matched;
	}

	@ElementCollection(fetch = FetchType.EAGER)
	@CollectionTable(name = "T_FT_LANGUAGE", joinColumns = { @JoinColumn(name = "FILM_ID") })
	@IndexColumn(name = "IDX")
	@Column(name = "LANGUAGE")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public String[] getLanguages() {
		return languages;
	}

	@Transient
	public Map<String, String> getLanguagesMap() {
		return languagesMap;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRICE_BASE_ID", insertable = false, updatable = false)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public TPriceBase getLowestPrice() {
		return lowestPrice;
	}

	@Column(name = "PRICE_BASE_ID")
	public Long getLowestPriceId() {
		return this.lowestPriceId;
	}

	@Column(name = "MAIN_ACTORS", length = 300)
	public String getMainActors() {
		return this.mainActors;
	}

	@Column(name = "MODIFIED")
	public Boolean getModified() {
		return modified;
	}

	@Column(name = "PAI_CI_HAO", length = 20)
	public String getPaiCiHao() {
		return this.paiCiHao;
	}

	@Column(name = "PIN_CODE", length = 20)
	public String getPinCode() {
		return this.pinCode;
	}

	@Column(name = "PREMIERE_DATE", length = 7)
	public Date getPremiereDate() {
		return this.premiereDate;
	}

	@Column(name = "PRODUCER", length = 20)
	public String getProducer() {
		return this.producer;
	}

	@Column(name = "PUBLISHER_ID", precision = 38, scale = 0)
	public Long getPublisherId() {
		return this.publisherId;
	}

	@Column(name = "PUBLISHER_ID2", precision = 38, scale = 0)
	public Long getPublisherId2() {
		return this.publisherId2;
	}

	@Column(name = "RELEASE_TYPE", length = 20)
	public String getReleaseType() {
		return releaseType;
	}

	@Column(name = "RUNNING_TIME", precision = 38, scale = 0)
	public Long getRunningTime() {
		return this.runningTime;
	}

	@Column(name = "SERIES_NAME", length = 60)
	public String getSeriesName() {
		return this.seriesName;
	}

	@Column(name = "SHOW_SET", length = 20)
	public String getShowSet() {
		return showSet;
	}

	@Column(name = "STORY_BRIEF", length = 1500)
	public String getStoryBrief() {
		return this.storyBrief;
	}

	// @ElementCollection(fetch = FetchType.EAGER)
	// @CollectionTable(name = "T_FT_SHOWSET", joinColumns = { @JoinColumn(name
	// = "FILM_ID") })
	// @IndexColumn(name = "IDX")
	// @Column(name = "SHOW_SET")
	// @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	// public String[] getShowSets() {
	// return showSets;
	// }

	@Column(name = "SUBTITLE1", length = 20)
	public String getSubtitle1() {
		return this.subtitle1;
	}

	@Column(name = "SUBTITLE2", length = 20)
	public String getSubtitle2() {
		return this.subtitle2;
	}

	@Column(name = "TAX_RATIO", precision = 22, scale = 0)
	public Integer getTaxRatio() {
		return this.taxRatio;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tFilm")
	public Set<TFilmContract> gettFilmContracts() {
		return this.tFilmContracts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tFilm")
	public List<TFilmCopy> gettFilmCopies() {
		return this.tFilmCopies;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tFilm", cascade = CascadeType.ALL)
	public List<TFilmSlot> gettFilmSlots() {
		return this.tFilmSlots;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PUBLISHER_ID", insertable = false, updatable = false)
	public TPublisher gettPublisher() {
		return this.tPublisher;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PUBLISHER_ID2", insertable = false, updatable = false)
	public TPublisher gettPublisher2() {
		return this.tPublisher2;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UNIQUE_FILM_ID", insertable = false, updatable = false)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public TFilm getUniqueFilm() {
		return uniqueFilm;
	}

	@Column(name = "UNIQUE_FILM_ID")
	public Long getUniqueFilmId() {
		return uniqueFilmId;
	}

	@Column(name = "YEAR_MONTH", length = 10)
	public String getYearMonth() {
		return this.yearMonth;
	}

	public void setAccountRatio(Integer accountRatio) {
		this.accountRatio = accountRatio;
	}

	public void setAccountType(String accountType) {
		this.accountType = accountType;
	}

	public void setAudioTypes(String[] audioTypes) {
		this.audioTypes = audioTypes;
	}

	public void setCopyCount(Long filmCopyCount) {
		this.copyCount = filmCopyCount;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	public void setDirector(String director) {
		this.director = director;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public void setEnglishName(String englishName) {
		this.englishName = englishName;
	}

	public void setFilmAccountType(String filmAccountType) {
		this.filmAccountType = filmAccountType;
	}

	public void setFilmCate(String filmCate) {
		this.filmCate = filmCate;
	}

	public void setFilmCode(String filmCode) {
		this.filmCode = filmCode;
	}

	public void setFilmCompany(String filmCompany) {
		this.filmCompany = filmCompany;
	}

	public void setFilmLevel(String filmLevel) {
		this.filmLevel = filmLevel;
	}

	public void setFilmName(String filmName) {
		this.filmName = filmName;
	}

	public void setFilmSet(String filmSet) {
		this.filmSet = filmSet;
	}

	public void setFilmTypes(String[] filmTypes) {
		this.filmTypes = filmTypes;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public void setIs3d(Boolean is3d) {
		this.is3d = is3d;
	}

	public void setIsDigital(Boolean isDigital) {
		this.isDigital = isDigital;
	}

	public void setIsFilm(Boolean isFilm) {
		this.isFilm = isFilm;
	}


	public void setIsReald(Boolean isReald) {
		this.isReald = isReald;
	}
	public void setMatched(Boolean matched) {
		this.matched = matched;
	}

	public void setLanguages(String[] languages) {
		this.languages = languages;
	}

	public void setLanguagesMap(Map<String, String> languagesMap) {
		this.languagesMap = languagesMap;
	}

	public void setLowestPrice(TPriceBase lowestPrice) {
		this.lowestPrice = lowestPrice;
	}

	public void setLowestPriceId(Long lowestPrice) {
		this.lowestPriceId = lowestPrice;
	}

	public void setMainActors(String mainActors) {
		this.mainActors = mainActors;
	}

	public void setModified(Boolean modified) {
		this.modified = modified;
	}

	public void setPaiCiHao(String paiCiHao) {
		this.paiCiHao = paiCiHao;
	}

	public void setPinCode(String pinCode) {
		this.pinCode = pinCode;
	}

	public void setPremiereDate(Date premiereDate) {
		this.premiereDate = premiereDate;
	}

	public void setProducer(String producer) {
		this.producer = producer;
	}

	public void setPublisherId(Long publisherId) {
		this.publisherId = publisherId;
	}

	public void setPublisherId2(Long publisherId2) {
		this.publisherId2 = publisherId2;
	}

	public void setReleaseType(String releaseType) {
		this.releaseType = releaseType;
	}

	public void setRunningTime(Long runningTime) {
		this.runningTime = runningTime;
	}

	public void setSeriesName(String seriesName) {
		this.seriesName = seriesName;
	}

	public void setShowSet(String showSet) {
		this.showSet = showSet;
	}

	// public void setShowSets(String[] showSets) {
	// this.showSets = showSets;
	// }

	public void setStoryBrief(String storyBrief) {
		this.storyBrief = storyBrief;
	}

	public void setSubtitle1(String subtitle1) {
		this.subtitle1 = subtitle1;
	}

	public void setSubtitle2(String subtitle2) {
		this.subtitle2 = subtitle2;
	}

	public void setTaxRatio(Integer taxRatio) {
		this.taxRatio = taxRatio;
	}

	public void settFilmContracts(Set<TFilmContract> tFilmContracts) {
		this.tFilmContracts = tFilmContracts;
	}

	public void settFilmCopies(List<TFilmCopy> tFilmCopies) {
		this.tFilmCopies = tFilmCopies;
	}

	public void settFilmSlots(List<TFilmSlot> tFilmSlots) {
		this.tFilmSlots = tFilmSlots;
	}

	public void settPublisher(TPublisher tPublisher) {
		this.tPublisher = tPublisher;
	}

	public void settPublisher2(TPublisher tPublisher) {
		this.tPublisher2 = tPublisher;
	}

	public void setUniqueFilm(TFilm uniqueFilm) {
		this.uniqueFilm = uniqueFilm;
	}

	public void setUniqueFilmId(Long uniqueFilmId) {
		this.uniqueFilmId = uniqueFilmId;
	}

	public void setYearMonth(String yearMonth) {
		this.yearMonth = yearMonth;
	}

	@Override
	public String toString() {
		return "影片 [" + filmCode + "， " + filmName + "]";
	}

	@Column(name="ACCOUNT_RATIO_DESC",length=500)
	public String getAccountRatioDesc() {
		return accountRatioDesc;
	}

	public void setAccountRatioDesc(String accountRatioDesc) {
		this.accountRatioDesc = accountRatioDesc;
	}

	
	@Column(name="IS_IMAX")
	public Boolean getIsIMax() {
		return isIMax;
	}

	public void setIsIMax(Boolean isImax) {
		this.isIMax = isImax;
	}

	@Column(name="GROUP_ACCOUNT_RATIO", precision = 22, scale = 0)
	public Integer getGroupAccountRatio() {
		return groupAccountRatio;
	}

	public void setGroupAccountRatio(Integer groupAccountRatio) {
		this.groupAccountRatio = groupAccountRatio;
	}

	@Column(name="DELETED")
	public Boolean getDeleted() {
		return deleted;
	}

	public void setDeleted(Boolean deleted) {
		this.deleted = deleted;
	}

	@Column(name="DELETE_DATE")
	public Date getDeletedDate() {
		return deletedDate;
	}

	public void setDeletedDate(Date deletedDate) {
		this.deletedDate = deletedDate;
	}

	@Column(name="DELETE_BY")
	public String getDeletedBy() {
		return deletedBy;
	}

	public void setDeletedBy(String deletedBy) {
		this.deletedBy = deletedBy;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PUBLISHER_ID3", insertable = false, updatable = false)
	public TPublisher gettPublisher3() {
		return tPublisher3;
	}

	public void settPublisher3(TPublisher tPublisher3) {
		this.tPublisher3 = tPublisher3;
	}
	
	@Column(name = "PUBLISHER_ID3", precision = 38, scale = 0)
	public Long getPublisherId3() {
		return publisherId3;
	}

	public void setPublisherId3(Long publisherId3) {
		this.publisherId3 = publisherId3;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PUBLISHER_ID4", insertable = false, updatable = false)
	public TPublisher gettPublisher4() {
		return tPublisher4;
	}

	public void settPublisher4(TPublisher tPublisher4) {
		this.tPublisher4 = tPublisher4;
	}
	
	@Column(name = "PUBLISHER_ID4", precision = 38, scale = 0)
	public Long getPublisherId4() {
		return publisherId4;
	}

	public void setPublisherId4(Long publisherId4) {
		this.publisherId4 = publisherId4;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PUBLISHER_ID5", insertable = false, updatable = false)
	public TPublisher gettPublisher5() {
		return tPublisher5;
	}

	public void settPublisher5(TPublisher tPublisher5) {
		this.tPublisher5 = tPublisher5;
	}
	
	@Column(name = "PUBLISHER_ID5", precision = 38, scale = 0)
	public Long getPublisherId5() {
		return publisherId5;
	}

	public void setPublisherId5(Long publisherId5) {
		this.publisherId5 = publisherId5;
	}

}