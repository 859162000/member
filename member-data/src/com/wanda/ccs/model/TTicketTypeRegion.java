package com.wanda.ccs.model;

// Generated 2011-11-2 12:36:06 by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.SEQUENCE;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.xcesys.extras.core.dao.model.VersionableEntity;

/**
 * TTicketTypeRegion generated by hbm2java
 */
@Entity
@Table(name = "T_TICKET_TYPE_REGION")
public class TTicketTypeRegion extends VersionableEntity implements
		java.io.Serializable, IRegionCode {
	private static final long serialVersionUID = -4985544824498105439L;
	
	private Long id;
	private TTicketType tTicketType;
	private TCardType tCardType;// 卡类型
	private TVoucherType tVoucherType;// 券类型
	private String regionCode;// 票类使用的区域代码
	private Long ticketTypeId;// 票类型Id
	private String paymentDefault = "Y";
	private String limitDefault = "Y";
	private String useDefault = "Y";
	private boolean delete;
	private Long reqNum = 0l;
	private Long roundLimit = 0l;//每场可购票数

	public TTicketTypeRegion() {
	}

	public TTicketTypeRegion(TTicketType tTicketType, String regionCode,
			Long ticketTypeId) {
		this.tTicketType = tTicketType;
		this.regionCode = regionCode;
		this.ticketTypeId = ticketTypeId;
	}

	@SequenceGenerator(name = "generator", sequenceName = "S_T_TICKET_TYPE_REGION", allocationSize = 1)
	@Id
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
	@Column(name = "TICKET_TYPE_REGION_ID", unique = true, nullable = false, precision = 38, scale = 0)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TICKET_TYPE_ID", nullable = false, insertable = false, updatable = false)
	public TTicketType gettTicketType() {
		return this.tTicketType;
	}

	public void settTicketType(TTicketType tTicketType) {
		this.tTicketType = tTicketType;
	}

	@Column(name = "TICKET_TYPE_ID", nullable = false)
	public Long getTicketTypeId() {
		return ticketTypeId;
	}

	public void setTicketTypeId(Long ticketTypeId) {
		this.ticketTypeId = ticketTypeId;
	}

	@Column(name = "REGION_CODE", nullable = false, length = 20)
	public String getRegionCode() {
		return this.regionCode;
	}

	public void setRegionCode(String regionCode) {
		this.regionCode = regionCode;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TICKET_TYPE_ID", nullable = false, insertable = false, updatable = false)
	public TCardType gettCardType() {
		return tCardType;
	}

	public void settCardType(TCardType tCardType) {
		this.tCardType = tCardType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TICKET_TYPE_ID", nullable = false, insertable = false, updatable = false)
	public TVoucherType gettVoucherType() {
		return tVoucherType;
	}

	public void settVoucherType(TVoucherType tVoucherType) {
		this.tVoucherType = tVoucherType;
	}

	@Transient
	public boolean getDelete() {
		return delete;
	}

	public void setDelete(boolean delete) {
		this.delete = delete;
	}

	@Column(name = "REQ_NUM", nullable = false)
	public Long getReqNum() {
		return reqNum;
	}

	public void setReqNum(Long reqNum) {
		this.reqNum = reqNum;
	}

	@Column(name = "LIMIT_DEFAULT", nullable = false)
	public String getLimitDefault() {
		return limitDefault;
	}

	public void setLimitDefault(String limitDefault) {
		this.limitDefault = limitDefault;
	}

	@Transient
	public Boolean getIsLimitDefault() {
		return "Y".equalsIgnoreCase(limitDefault);
	}

	public void setIsLimitDefault(Boolean isDefault) {
		this.limitDefault = isDefault ? "Y" : "N";
	}

	@Column(name = "USE_DEFAULT", nullable = false)
	public String getUseDefault() {
		return useDefault;
	}

	public void setUseDefault(String useDefault) {
		this.useDefault = useDefault;
	}

	@Transient
	public Boolean getIsUseDefault() {
		return "Y".equalsIgnoreCase(useDefault);
	}

	public void setIsUseDefault(Boolean isDefault) {
		this.useDefault = isDefault ? "Y" : "N";
	}
	
	@Column(name = "PAYMENT_DEFAULT", nullable = false)
	public String getPaymentDefault() {
		return paymentDefault;
	}

	public void setPaymentDefault(String paymentDefault) {
		this.paymentDefault = paymentDefault;
	}
	
	@Transient
	public Boolean getIsPaymentDefault() {
		return "Y".equalsIgnoreCase(paymentDefault);
	}

	public void setIsPaymentDefault(Boolean isDefault) {
		this.paymentDefault = isDefault ? "Y" : "N";
	}
	
	@Column(name = "ROUND_LIMIT", nullable = true, precision = 10)
	public Long getRoundLimit() {
		return roundLimit;
	}

	public void setRoundLimit(Long roundLimit) {
		this.roundLimit = roundLimit;
	}
	
}
