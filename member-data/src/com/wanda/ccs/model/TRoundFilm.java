package com.wanda.ccs.model;

// Generated 2011-11-22 18:03:31 by Hibernate Tools 3.2.4.GA

import static javax.persistence.GenerationType.SEQUENCE;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import com.xcesys.extras.core.dao.model.AbstractEntity;

/**
 * TRoundFilm generated by hbm2java
 */
@Entity
@Table(name = "T_ROUND_FILM")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class TRoundFilm extends AbstractEntity implements
		Comparable<TRoundFilm> {

	private static final long serialVersionUID = -4902887470987323191L;
	private Long id;
	private TSchedulePlanB schedulePlanB;
	private TFilm film;
	private Long filmId;
	private String roundNo;
	private Long idx;
	private Long runningTime;
	private Integer cleanTime;
	private Integer adTime;
	private Date startTime;
	private Date endTime;
	private TPriceBase price;
	private Long priceId;
	private Integer ratio;
	private String language;
	private Set<TSubRoundTicketType> ticketTypes = new HashSet<TSubRoundTicketType>(0);

	public TRoundFilm() {
	}

	@Override
	public int compareTo(TRoundFilm o) {
		Long idx1 = this.getIdx();
		Long idx2 = o.getIdx();

		return (int) ((idx1 == null ? 0l : idx1.longValue()) - (idx2 == null ? 0l
				: idx2.longValue()));
	}

	@Column(name = "AD_TIME", precision = 38, scale = 0)
	public Integer getAdTime() {
		return this.adTime;
	}

	@Column(name = "CLEAN_TIME", precision = 38, scale = 0)
	public Integer getCleanTime() {
		return this.cleanTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "END_TIME", length = 7)
	public Date getEndTime() {
		return this.endTime;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FILM_ID", insertable = false, updatable = false)
	public TFilm getFilm() {
		return this.film;
	}

	@Column(name = "FILM_ID")
	public Long getFilmId() {
		return filmId;
	}

	@SequenceGenerator(name = "generator", sequenceName = "S_T_ROUND_FILM")
	@Id
	@GeneratedValue(strategy = SEQUENCE, generator = "generator")
	@Column(name = "ROUND_FILM_ID", unique = true, nullable = false, precision = 38, scale = 0)
	public Long getId() {
		return this.id;
	}

	@Column(name = "IDX", precision = 38, scale = 0)
	public Long getIdx() {
		return this.idx;
	}

	@Column(name = "LANGUAGE")
	public String getLanguage() {
		return language;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRICE_ID", insertable = false, updatable = false)
	public TPriceBase getPrice() {
		return price;
	}

	@Column(name = "PRICE_ID", precision = 38, scale = 0)
	public Long getPriceId() {
		return this.priceId;
	}

	@Column(name = "RATIO")
	public Integer getRatio() {
		return this.ratio;
	}

	@Column(name = "ROUND_NO", length = 20)
	public String getRoundNo() {
		return this.roundNo;
	}

	@Column(name = "RUNNING_TIME", precision = 38, scale = 0)
	public Long getRunningTime() {
		return runningTime;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SCHEDULE_PLAN_B_ID", nullable = false)
	public TSchedulePlanB getSchedulePlanB() {
		return this.schedulePlanB;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "START_TIME", length = 7)
	public Date getStartTime() {
		return this.startTime;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tRoundFilm", cascade = CascadeType.ALL, orphanRemoval = true)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public Set<TSubRoundTicketType> getTicketTypes() {
		return this.ticketTypes;
	}

	public void setTicketTypes(Set<TSubRoundTicketType> tSubRoundTicketTypes) {
		this.ticketTypes = tSubRoundTicketTypes;
	}
	
	public void setAdTime(Integer adTime) {
		this.adTime = adTime;
	}

	public void setCleanTime(Integer cleanTime) {
		this.cleanTime = cleanTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	public void setFilm(TFilm tFilm) {
		this.film = tFilm;
	}

	public void setFilmId(Long filmId) {
		this.filmId = filmId;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public void setIdx(Long idx) {
		this.idx = idx;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	public void setPrice(TPriceBase price) {
		this.price = price;
	}

	public void setPriceId(Long priceId) {
		this.priceId = priceId;
	}

	public void setRatio(Integer ratio) {
		this.ratio = ratio;
	}

	public void setRoundNo(String no) {
		this.roundNo = no;
	}

	public void setRunningTime(Long runningTime) {
		this.runningTime = runningTime;
	}

	public void setSchedulePlanB(TSchedulePlanB tSchedulePlanB) {
		this.schedulePlanB = tSchedulePlanB;
	}

	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}
	@Override
	public String toString() {
		return "[场次编号:" + roundNo + "," + (film != null ? film.getDisplayName() : "") + "]";
	}

}
