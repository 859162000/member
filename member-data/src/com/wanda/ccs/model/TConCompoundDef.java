package com.wanda.ccs.model;

// Generated Nov 30, 2012 1:59:30 PM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import com.xcesys.extras.core.dao.model.VersionableEntity;

/**
 * TConCompoundDef generated by hbm2java
 */
@Entity
@Table(name = "T_CON_COMPOUND_DEF")
public class TConCompoundDef extends VersionableEntity implements
		java.io.Serializable {
	private static final long serialVersionUID = 6335470495346934303L;
	
	private Long conItemId;
	private TConItem tConItem;
	private String unit;//售卖单位
	private String compoundType;//合成品类型 1成品 2中间品
	private Long standardQuantity;//标准数量 只有为中间品的时候才有值，否则清空
	private List<TConCompoundDefDetail> tConCompoundDefDetails = new ArrayList<TConCompoundDefDetail>(
			0);
	private List<TConCompound> tConCompounds = new ArrayList<TConCompound>();

	public TConCompoundDef() {
	}
	
	public TConCompoundDef(TConCompoundDef def) {
		if(def == null)
			return ;
		this.tConItem = new TConItem(def.gettConItem());
		this.setUnit(def.getUnit());
		this.setCompoundType(def.getCompoundType());
		this.setStandardQuantity(def.getStandardQuantity());
		for(TConCompoundDefDetail defDetail : def.gettConCompoundDefDetails()){
			this.tConCompoundDefDetails.add(new TConCompoundDefDetail(defDetail, this));
		}
	}
	
	public void copy(TConCompoundDef conCompoundDef){
		if(conCompoundDef == null)
			return;
		this.setUnit(conCompoundDef.getUnit());
		this.setCompoundType(conCompoundDef.getCompoundType());
		this.setStandardQuantity(conCompoundDef.getStandardQuantity());
		this.tConItem.copy(conCompoundDef.gettConItem());
		Set<Long> thisDetailItemIds = new HashSet<Long>();
		for(TConCompoundDefDetail thisDetail : this.tConCompoundDefDetails){
			thisDetailItemIds.add(thisDetail.gettConItem().getId());
		}
		for(TConCompoundDefDetail detail : conCompoundDef.gettConCompoundDefDetails()){
			if(thisDetailItemIds.contains(detail.gettConItem().getId())){
				for(TConCompoundDefDetail thisDetail : this.tConCompoundDefDetails){
					if(thisDetail.gettConItem().getId().longValue() == detail.gettConItem().getId().longValue()){
						thisDetail.copy(detail);
						break;
					}
				}
			}else{
				this.tConCompoundDefDetails.add(new TConCompoundDefDetail(detail,this));
			}
			
		}
	}
	public TConCompoundDef(TConItem tConItem, String unit) {
		this.tConItem = tConItem;
		this.setUnit(unit);
	}
	
	@Id
	@Column(name = "CON_ITEM_ID")
	@GeneratedValue(generator = "foreigner")
	@GenericGenerator(name = "foreigner", strategy = "foreign", parameters = { @Parameter(name = "property", value = "tConItem") })
	public Long getConItemId() {
		return this.conItemId;
	}

	public void setConItemId(Long conItemId) {
		this.conItemId = conItemId;
	}

	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@PrimaryKeyJoinColumn
	public TConItem gettConItem() {
		return this.tConItem;
	}

	public void settConItem(TConItem tConItem) {
		this.tConItem = tConItem;
	}

	@Transient
	public String getUnit() {
		this.unit = this.gettConItem().getUnit();
		return this.unit;
	}

	public void setUnit(String unit) {
		this.unit = unit;
		this.gettConItem().setUnit(unit);
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tConCompoundDef", cascade = CascadeType.ALL, orphanRemoval = true)
	public List<TConCompoundDefDetail> gettConCompoundDefDetails() {
		return this.tConCompoundDefDetails;
	}

	public void settConCompoundDefDetails(
			List<TConCompoundDefDetail> tConCompoundDefDetails) {
		this.tConCompoundDefDetails = tConCompoundDefDetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tConCompoundDef")
	public List<TConCompound> gettConCompounds() {
		return this.tConCompounds;
	}

	public void settConCompounds(List<TConCompound> tConCompounds) {
		this.tConCompounds = tConCompounds;
	}
	
	@Column(name = "COMPOUND_TYPE")
	public String getCompoundType() {
		return compoundType;
	}

	public void setCompoundType(String compoundType) {
		this.compoundType = compoundType;
	}

	@Column(name = "STANDARD_QUANTITY")
	public Long getStandardQuantity() {
		return standardQuantity;
	}

	public void setStandardQuantity(Long standardQuantity) {
		this.standardQuantity = standardQuantity;
	}

	@Override
	@Transient
	public Long getId() {
		return this.conItemId;
	}

	@Override
	public void setId(Long id) {
		this.conItemId = id;
	}

}
